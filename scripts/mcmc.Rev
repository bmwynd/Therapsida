#########################################################
#                                                       #
#   RevBayes: reassessment of therapsid phylogenetics   #
# Mk and SHDM models using morphological character data #
#                                                       #
#########################################################
####################
# Read in the data #
####################

morpho = readDiscreteCharacterData("data/therapsida.nex")
taxa <- readTaxonData("data/ages.tsv")

morpho.addMissingTaxa( taxa )

#helper variables
n_taxa = taxa.size()
num_taxa = taxa.size()
num_brances = 2 * num_taxa - 3

#establish the moves
moves = VectorMoves()
monitors = VectorMonitors()

#source the character and clock models
source("scripts/model_BDP_tree.Rev")
source("scripts/model_UCLN.Rev")
#################################################
# Define the model of among-site rate variation #
#################################################

alpha ~ dnGamma(1E8, 0.5)
moves.append(mvScale(alpha, weight=10.0))
moves.append(mvScale(alpha, weight=10.0))

site_rates := fnDiscretizeGamma(alpha, alpha, 4)
#################################################



#################################
# Define the phyloCTMC model    #
# (AKA the likelihood function) #
#################################
n_max_states <- 3
idx = 1
morpho_bystate[1] <- morpho
for (i in 2:n_max_states) {
    # make local tmp copy of data
    # only keep character blocks with state space equal to size i
    morpho_bystate[i] <- morpho
    morpho_bystate[i].setNumStatesPartition(i)
    # get number of characters per character size with i-sized states
    nc = morpho_bystate[i].nchar()
    # for non-empty character blocks
    if (nc > 0) {
        #make i-by-i rate matrix
        q[idx] <- fnJC(i)
    # create model of evolution for the character block
        m_morph[idx] ~ dnPhyloCTMC( tree=timetree,
                                    Q=q[idx],
                                    nSites=nc,
                                    siteRates=site_rates,
                                    branchRates = branch_rates,
                                    type="Standard")
        # attach the data
        m_morph[idx].clamp(morpho_bystate[i])
        
        # increment counter
        idx = idx + 1
        idx
    }
}

#########################
# Make the model object #
#########################
my_model = model(timetree)


#####################
# Make the monitors #
#####################

monitors.append(mnModel(filename="output_FBD_MK/posterior_samples.log", printgen=10, separator = TAB))
monitors.append(mnFile(filename="output_FBD_MK/tree_samples.trees", printgen=10, separator = TAB, timetree))
monitors.append(mnScreen(printgen=100, num_samp_anc))

##################
# run the mcmc #
##################

mymcmc = mcmc(my_model, moves, monitors, nruns=2, combine="mixed")
mymcmc.run(generations=2000000,tuningInterval=200)

#########################################
# Read in the posterior sample of trees #
# and compute the MAP tree              #
#########################################

#start by reading in the tree trace
#treetrace = readTreeTrace("output_FBD_MK/tree_samples.trees")
#map_tree = mapTree(treetrace, "output_FBD_MK/MAP_tree.tree")

#exit the program
#q()
